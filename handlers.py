from bd import insert_data, all_data, del_data
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import CommandStart
from keyboard import main_keyboard, stop_fsm, thread_id

router = Router()


@router.message(CommandStart())
async def start(message: Message):
    # print(message)
    await message.answer('ü§ñ –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –≤ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã.\n\n'
                         '–§–£–ù–ö–¶–ò–û–ù–ê–õ:\n'
                         ' <b>"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ‚úÖ"</b> - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n'
                         ' <b>"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ üìö"</b> - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏.\n'
                         ' <b>"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå"</b> - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ id_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n'
                         ' <b>"Stop"</b> - –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:'
                         ' <b>"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ‚úÖ"</b> –∏ <b>"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå"</b>',
                         reply_markup=main_keyboard,
                         parse_mode='html')


class NewData(StatesGroup):
    subject = State()
    dispatch_time = State()
    text_message = State()


@router.message(F.text == 'Stop')
async def process_gender_press(message: Message, state: FSMContext):
    await message.answer('–ó–∞–ø–æ–ª–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ', reply_markup=main_keyboard)
    await state.clear()


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ‚úÖ')
async def search_book(message: Message, state: FSMContext):
    await state.set_state(NewData.subject)
    await message.answer(text="–í –∫–∞–∫—É—é —Ç–µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=thread_id())


@router.message(NewData.subject)
async def search_name_book(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await state.set_state(NewData.dispatch_time)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏,\n–≤ –≤–∏–¥–µ 2023-10-27:', reply_markup=stop_fsm())


@router.message(NewData.dispatch_time)
async def search_name_book(message: Message, state: FSMContext):
    await state.update_data(dispatch_time=message.text)
    await state.set_state(NewData.text_message)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:', reply_markup=stop_fsm())


@router.message(NewData.text_message)
async def search_author_book(message: Message, state: FSMContext):
    await state.update_data(text_message=message.text)
    data = await state.get_data()
    await state.clear()
    insert_data(data['subject'], data['dispatch_time'], data['text_message'])
    await message.answer('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ', reply_markup=main_keyboard)


@router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ üìö')
async def search_book(message: Message):
    records = all_data()
    count = 0
    for record in records:
        id_book, subject, dispatch_time, text_message = record
        count += 1
        await message.answer(text=f'–ó–ê–ü–ò–°–¨ ‚Ññ{count}\n\n'
                                  f'üÜî id_data –∑–∞–ø–∏—Å–∏: {id_book}\n'
                                  f'üí° –¢–µ–º–∞ –∑–∞–ø–∏—Å–∏: {subject}\n'
                                  f'üïì –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ : {dispatch_time}\n'
                                  f'üìñ –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏: {text_message}')


class DelData(StatesGroup):
    id_data = State()


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ‚ùå')
async def delete_datas(message: Message, state: FSMContext):
    await state.set_state(DelData.id_data)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id_data –∑–∞–ø–∏—Å–∏:', reply_markup=stop_fsm())


@router.message(DelData.id_data)
async def id_del_data(message: Message, state: FSMContext):
    await state.update_data(id_data=message.text)
    data = await state.get_data()
    await state.clear()
    del_data(data['id_data'])
    await message.answer('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ ‚ùå')

